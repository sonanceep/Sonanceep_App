// rules_version = '2';
// service cloud.firestore {
//   match /databases/{database}/documents {
//     // collectionGroupのルール
//     match /{path=**}/posts/{postCommentId} {
//       allow read: if isAuthenticatedAndVerified();
//     }
//     match /{path=**}/postComments/{postCommentId} {
//       allow read: if isAuthenticatedAndVerified();
//     }
//     match /{path=**}/postCommentReplies/{postCommentId} {
//       allow read: if isAuthenticatedAndVerified();
//     }
//     match /deleteUsers/{uid} {
//       allow create: if isTheSameUserAndVerified(uid) && isValidUser(request.resource.data,uid);
//     }
//     match /users/{uid} {
//       allow read: if isAuthenticatedAndVerified();
//       allow update: if isAdmin();
//       // request.resource.dataは送信されたデータ
//       allow create: if isTheSameUser(uid) && isValidUser(request.resource.data,uid);
//       match /timelines/{postId} {
//         allow read: if isTheSameUserAndVerified(uid);
//         // 作成と削除はcloudfunctionsで行う
//       }
//       match /userUpdateLogs/{userUpdateLogId} {
//         // 本人だけにしかLogを作成できないようにする
//         allow create: if isTheSameUserAndVerified(uid);
//       }
//       match /userMutes/{activeUid} {
//         //　作成と削除は能動的なユーザーのみが行うことができる。
//         allow create, delete: if isTheSameUserAndVerified(activeUid);
//       }
//       match /tokens/{tokenId} {
//         allow read, create, delete: if isTheSameUserAndVerified(uid);
//       }
//       match /followers/{followerUid} {
//         allow create, delete: if isTheSameUserAndVerified(followerUid);
//       }
//       match /posts/{postId} {
//         allow read: if isAuthenticatedAndVerified();
//         allow update: if isAdmin();
//         allow create: if isTheSameUserAndVerified(uid) && isValidPost(request.resource.data,uid);
//         allow delete: if isTheSameUserAndVerified(uid);
//         match /postReports/{postReportId} {
//           allow create: if isAuthenticatedAndVerified();
//         }
//         match /postLikes/{activeUid} {
//           allow create, delete: if isTheSameUserAndVerified(activeUid);
//         }
//         match /postMutes/{activeUid} {
//           allow create, delete: if isTheSameUserAndVerified(activeUid);
//         }
//         match /postComments/{postCommentId} {
//           allow read: if isAuthenticatedAndVerified();
//           allow create: if isAuthenticatedAndVerified();
//             // postCommentのdataのuidが現在ログインしている人と同じであれば消去できる
//           allow delete: if isTheSameUserAndVerified(resource.data.uid);
//           match /postCommentReports/{reportId} {
//             allow create: if isAuthenticatedAndVerified();
//           }
//           match /postCommentMutes/{activeUid} {
//             //　作成と削除は能動的なユーザーのみが行うことができる。
//             allow create, delete: if isTheSameUserAndVerified(activeUid);
//           }
//           match /postCommentLikes/{activeUid} {
//             allow create, delete: if isTheSameUserAndVerified(activeUid);
//           }
//           match /postCommentReplies/{postCommentReplyId} {
//             allow read: if isAuthenticatedAndVerified();
//             // allow create, delete: if isTheSameUserAndVerified(uid);
//             allow create: if isAuthenticatedAndVerified();
//             // postCommentReplyのdataのuidが現在ログインしている人と同じであれば消去できる
//             allow delete: if isTheSameUserAndVerified(resource.data.uid);
//             match /postCommentReplyReports/ {reportId} {
//               allow create: if isAuthenticatedAndVerified();
//             }
//             match /postCommentReplyMutes/{activeUid} {
//               allow create, delete: if isTheSameUserAndVerified(activeUid); 
//             }
//             match /postCommentReplyLikes/{activeUid} {
//               allow create, delete: if isTheSameUserAndVerified(activeUid);
//             }
//           }
//         }
//       }
//     }
//   }
 
//   function isAuthenticatedAndVerified() {
//     return request.auth != null && isEmailVerifed();
//   }
//   function isTheSameUser(uid) {
//     return request.auth.uid == uid;
//   }
//   function isTheSameUserAndVerified(uid) {
//     // コメントです
//     return ( request.auth.uid == uid && isEmailVerifed() );
//   }
//   function isAdmin() {
//     return request.auth.uid == "hcbXO8Rs4PPGua2vlPL92XTmpJj1";
//   }
//   function isEmailVerifed() {
//     return request.auth.token.email_verified;
//   }
 
//   function isValidUser(user,uid) {
//     // bool を return
//     return user.size() == 15 &&
//     "createdAt" in user && user.createdAt is timestamp && 
//     "followerCount" in user && user.followerCount is int &&
//     "followingCount" in user && user.followingCount is int && 
//     "isAdmin" in user && user.isAdmin is bool &&
//     "muteCount" in user && user.muteCount is int && 
//     "searchToken" in user && user.searchToken is map &&
//     "postCount" in user && user.postCount is int && 
//     "updatedAt" in user && user.updatedAt is timestamp && 
//     "userName" in user && user.userName is string && 
//     "userNameLanguageCode" in user && user.userNameLanguageCode is string &&
//     "userNameNagativeScore" in user && user.userNameNagativeScore is number && 
//     "userNamePositiveScore" in user && user.userNamePositiveScore is number && 
//     "userNameSentiment" in user && user.userNameSentiment is string &&
//     "uid" in user && user.uid is string && 
//     "userImageURL" in user && user.userImageURL is string &&
//     // documentに含まれているuidがFirebaseAuthのuidと一致する
//     user.uid == uid;
//   } 
//   function isValidPost(post,uid) {
//     return post.size() == 21 &&
//     "createdAt" in post && post.createdAt is timestamp && 
//     "hashTags" in post && post.hashTags is list &&
//     "imageURL" in post && post.imageURL is string &&
//     "likeCount" in post && post.likeCount is int &&
//     "text" in post && post.text is string && 
//     "textLanguageCode" in post && post.textLanguageCode is string &&
//     "textNagativeScore" in post && post.textNagativeScore is number && 
//     "textPositiveScore" in post && post.textPositiveScore is number && 
//     "textSentiment" in post && post.textSentiment is string &&
//     "postCommentCount" in post && post.postCommentCount is int &&
//     "postId" in post && post.postId is string &&
//     "reportCount" in post && post.reportCount is int &&
//     "muteCount" in post && post.muteCount is int &&
//     "uid" in post && post.uid is string && 
//     "userName" in post && post.userName is string && 
//     "userNameLanguageCode" in post && post.userNameLanguageCode is string &&
//     "userNameNagativeScore" in post && post.userNameNagativeScore is number && 
//     "userNamePositiveScore" in post && post.userNamePositiveScore is number && 
//     "userNameSentiment" in post && post.userNameSentiment is string &&
//     "userImageURL" in post && post.userImageURL is string &&
//     "updatedAt" in post && post.updatedAt is timestamp &&
//     post.uid == uid;
//   }
// }





rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{path=**}/posts/{postCommentId} {  // collectionGroupのルール
      // allow read: if isAuthenticatedAndVerified();
      allow read: if true;
    }
    match /{path=**}/postComments/{postCommentId} {  // collectionGroupのルール
      // allow read: if isAuthenticatedAndVerified();
      allow read: if true;
    }
    match /{path=**}/postCommentReplies/{postCommentId} {  // collectionGroupのルール
      // allow read: if isAuthenticatedAndVerified();
      allow read: if true;
    }
    match /deleteUsers/{uid} {
      allow create: if isTheSameUserAndVerified(uid) && isValidUser(request.resource.data, uid);
    }
    match /users/{uid} {
      // allow read: if isAuthenticatedAndVerified();
      allow read: if true;
      allow update: if isAdmin();
      allow create: if isTheSameUser(uid) && isValidUser(request.resource.data, uid);  // request.resource.dataは送信されたデータ
      match /timelines/{postId} {
        allow read: if isTheSameUserAndVerified(uid);
        //作成と削除はcloudfunctionsで行う
      }
      match /userUpdateLogs/{userUpdateLogId} {
        allow create: if isTheSameUserAndVerified(uid);  //本人しかLogを作成できない
      }
      match /userMutes/{activeUid} {
        allow create, delete: if isTheSameUserAndVerified(activeUid);  //受動的なユーザーのみができる
      }
      // token関係
      match /tokens/{tokenId} {
        allow read, create, delete: if isTheSameUserAndVerified(uid);  //本人しかLogを作成できない
      }
      //架空のユーザーをフォローできないように
      match /followers/{followerUid} {
        allow create, delete: if isTheSameUserAndVerified(followerUid);
      }
      match /posts/{postId} {
        // allow read: if isAuthenticatedAndVerified();
        allow read: if true;
        allow update: if isAdmin();
        allow create: if isTheSameUserAndVerified(uid) && isValidPost(request.resource.data, uid);
        allow delete: if isTheSameUserAndVerified(uid);  //本人しかLogを作成できない
        match /postReports/{postReportId} {
          allow create: if isAuthenticatedAndVerified();
        }
        match /postLikes/{activeUid} {
          allow create, delete: if isTheSameUserAndVerified(activeUid);
        }
        match /postMutes/{activeUid} {
          allow create, delete: if isTheSameUserAndVerified(activeUid);
        }
        match /postComments/{postCommentId} {
          // allow read: if isAuthenticatedAndVerified();
          allow read: if true;
          allow create: if isValidPostComment(request.resource.data, uid);
          // postCommentのdataのuidが現在ログインしている人と同じであれば消去できる
          allow delete: if isTheSameUserAndVerified(request.resource.data.uid);
          match /postCommentReports/{reportId} {
            allow create: if isAuthenticatedAndVerified();
          }
          match /postCommentMutes/{activeUid} {
            allow create, delete: if isTheSameUserAndVerified(activeUid);  //受動的なユーザーのみができる
          }
          match /postCommentLikes/{activeUid} {
            allow create, delete: if isTheSameUserAndVerified(activeUid);
          }
          match /postCommentReplies/{postCommentReplyId} {
            // allow read: if isAuthenticatedAndVerified();
            allow read: if true;
            allow create: if isValidPostCommentReply(request.resource.data, uid);
            // postCommentReplyのdataのuidが現在ログインしている人と同じであれば消去できる
            allow delete: if isTheSameUserAndVerified(request.resource.data.uid);
            match /postCommentReplyReports/{reportId} {
              allow create: if isAuthenticatedAndVerified();
            }
            match /postCommentReplyMutes/{activeUid} {
              allow create, delete: if isTheSameUserAndVerified(activeUid);
            }
            match /postCommentReplyLikes/{activeUid} {
              allow create, delete: if isTheSameUserAndVerified(activeUid);
            }
          }
        }
      }
    }
  }
  function isAuthenticatedAndVerified() {
    return request.auth != null && isEmailVerifed();
  }
  function isTheSameUser(uid) {
    return request.auth.uid == uid;
  }
  function isTheSameUserAndVerified(uid) {
    return ( request.auth.uid == uid && isEmailVerifed() );
  }
  function isAdmin() {
    return request.auth.uid == '4Sdbbrz2EwS2dGKKfeNuWCgTu683';
  }
  //メールアドレスを認証していないユーザーがFirestoreにdocumentを作成するのを制限するルール
  function isEmailVerifed() {
    return request.auth.token.email_verified;
  }
  //正しいユーザーかデータのスキーマを検証
  function isValidUser(user, uid) {
    return user.size() == 15 &&   // boolをreturn
    'createdAt' in user && user.createdAt is timestamp &&  // createdAtがuserのデータの中に入っているかを確認し、user.createdAtがtimestampなのかを確認
    'updatedAt' in user && user.updatedAt is timestamp &&
    'followerCount' in user && user.followerCount is int &&
    'followingCount' in user && user.followingCount is int &&
    'isAdmin' in user && user.isAdmin is bool &&
    'muteCount' in user && user.muteCount is int &&
    'searchToken' in user && user.searchToken is map &&
    'postCount' in user && user.postCount is int &&
    'userName' in user && user.userName is string &&
    'userNameLanguageCode' in user && user.userNameLanguageCode is string &&
    'userNameNegativeScore' in user && user.userNameNegativeScore is number &&
    'userNamePositiveScore' in user && user.userNamePositiveScore is number &&
    'userNameSentiment' in user && user.userNameSentiment is string &&
    'uid' in user && user.uid is string &&
    'userImageURL' in user && user.userImageURL is string &&
    user.uid == uid;  // documentに含まれているFirebaseAuthのuidと一致するか
  }
  //正しいポストかデータのスキーマを検証
  function isValidPost(post, uid) {
    return post.size() == 21 &&   // boolをreturn
    'createdAt' in post && post.createdAt is timestamp &&
    'hashTags' in post && post.hashTags is list &&
    'imageURL' in post && post.imageURL is string &&
    'likeCount' in post && post.likeCount is int &&
    'text' in post && post.text is string &&
    'textLanguageCode' in post && post.textLanguageCode is string &&
    'textNegativeScore' in post && post.textNegativeScore is number &&
    'textPositiveScore' in post && post.textPositiveScore is number &&
    'textSentiment' in post && post.textSentiment is string &&
    'commentCount' in post && post.commentCount is int &&
    'postId' in post && post.postId is string &&
    'reportCount' in post && post.reportCount is int &&
    'muteCount' in post && post.muteCount is int &&
    'uid' in post && post.uid is string &&
    'userName' in post && post.userName is string &&
    'userNameLanguageCode' in post && post.userNameLanguageCode is string &&
    'userNameNegativeScore' in post && post.userNameNegativeScore is number &&
    'userNamePositiveScore' in post && post.userNamePositiveScore is number &&
    'userNameSentiment' in post && post.userNameSentiment is string &&
    'userImageURL' in post && post.userImageURL is string &&
    'updatedAt' in post && post.updatedAt is timestamp &&
    post.uid == uid;  // documentに含まれているFirebaseAuthのuidと一致するか
  }
  //正しいコメントかデータのスキーマを検証
  function isValidPostComment(comment, uid) {
    return comment.size() == 20 &&   // boolをreturn
    'createdAt' in comment && comment.createdAt is timestamp &&
    'comment' in comment && comment.comment is string &&
    'commentLanguageCode' in comment && comment.commentLanguageCode is string &&
    'commentNegativeScore' in comment && comment.commentNegativeScore is number &&
    'commentPositiveScore' in comment && comment.commentPositiveScore is number &&
    'commentSentiment' in comment && comment.commentSentiment is string &&
    'likeCount' in comment && comment.likeCount is int &&
    'postRef' in comment && comment.postRef is path &&
    'postCommentId' in comment && comment.postCommentId is string &&
    'postCommentReplyCount' in comment && comment.postCommentReplyCount is int &&
    'reportCount' in comment && comment.reportCount is int &&
    'muteCount' in comment && comment.muteCount is int &&
    'userName' in comment && comment.userName is string &&
    'userNameLanguageCode' in comment && comment.userNameLanguageCode is string &&
    'userNameNegativeScore' in comment && comment.userNameNegativeScore is number &&
    'userNamePositiveScore' in comment && comment.userNamePositiveScore is number &&
    'userNameSentiment' in comment && comment.userNameSentiment is string &&
    'uid' in comment && comment.uid is string &&
    'userImageURL' in comment && comment.userImageURL is string &&
    'updatedAt' in comment && comment.updatedAt is timestamp &&
    comment.uid == uid;  // documentに含まれているFirebaseAuthのuidと一致するか
  }
  //正しいリプライかデータのスキーマを検証
  function isValidPostCommentReply(reply, uid) {
    return reply.size() == 19 &&   // boolをretrun
    'createdAt' in reply && reply.createdAt is timestamp &&
    'reply' in reply && reply.reply is string &&
    'replyLanguageCode' in reply && reply.replyLanguageCode is string &&
    'replyNegativeScore' in reply && reply.replyNegativeScore is number &&
    'replyPositiveScore' in reply && reply.replyPositiveScore is number &&
    'replySentiment' in reply && reply.replySentiment is string &&
    'likeCount' in reply && reply.likeCount is int &&
    'postRef' in reply && reply.postRef is path &&
    'postCommentRef' in reply && reply.postCommentRef is path &&
    'postCommentReplyId' in reply && reply.postCommentReplyId is string &&
    'reportCount' in reply && reply.reportCount is int &&
    'userName' in reply && reply.userName is string &&
    'userNameLanguageCode' in reply && reply.userNameLanguageCode is string &&
    'userNameNegativeScore' in reply && reply.userNameNegativeScore is number &&
    'userNamePositiveScore' in reply && reply.userNamePositiveScore is number &&
    'userNameSentiment' in reply && reply.userNameSentiment is string &&
    'uid' in reply && reply.uid is string &&
    'userImageURL' in reply && reply.userImageURL is string &&
    'updatedAt' in reply && reply.updatedAt is timestamp &&
    reply.uid == uid;  // documentに含まれているFirebaseAuthのuidと一致するか
  }
}